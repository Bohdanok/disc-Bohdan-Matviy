import random
import networkx as nx
import matplotlib.pyplot as plt
from itertools import combinations, groupby
def gnp_random_connected_graph(num_of_nodes: int,
                               completeness: int,
                               directed: bool = False,
                               draw: bool = False):
    """
    Generates a random graph, similarly to an Erdős-Rényi 
    graph, but enforcing that the resulting graph is conneted (in case of undirected graphs)
    """  
    if directed:
        G = nx.DiGraph()
    else:
        G = nx.Graph()
    edges = combinations(range(num_of_nodes), 2)
    G.add_nodes_from(range(num_of_nodes))
    
    for _, node_edges in groupby(edges, key = lambda x: x[0]):
        node_edges = list(node_edges)
        random_edge = random.choice(node_edges)
        if random.random() < 0.5:
            random_edge = random_edge[::-1]
        G.add_edge(*random_edge)
        for e in node_edges:
            if random.random() < completeness:
                G.add_edge(*e)
                
    for (u,v,w) in G.edges(data=True):
        w['weight'] = random.randint(-5, 20)
                
    if draw: 
        plt.figure(figsize=(10,6))
        if directed:
            # draw with edge weights
            pos = nx.arf_layout(G)
            nx.draw(G,pos, node_color='lightblue', 
                    with_labels=True,
                    node_size=500, 
                    arrowsize=20, 
                    arrows=True)
            labels = nx.get_edge_attributes(G,'weight')
            nx.draw_networkx_edge_labels(G, pos,edge_labels=labels)           
        else:
            nx.draw(G, node_color='lightblue', 
                with_labels=True, 
                node_size=500)
    return G
G = gnp_random_connected_graph(10, 0.5, True, True)
edges = list(G.edges(data=True))
num_nodes = max(max(u, v) for u, v, _ in edges) + 1
matrix = [[float('inf') for _ in range(num_nodes)] for _ in range(num_nodes)]
for edge in edges:
    u, v, w = edge[0], edge[1], edge[2]['weight']
    matrix[u][v] = w
def floyd_warshall(graph):
    n = len(graph)
    dist = [row[:] for row in graph]
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    return dist
# result = floyd_warshall(matrix)
# for row in result:
#     print(row)
# try:
#     final={}
#     dist = floyd_warshall(matrix)
#     for i,k in enumerate(dist):
#         for a,v in enumerate(k):
#             final.update({a:v})
#         print(f"Distances with {i} source:", final)
#         final={}
# except:
#     print("Negative cycle detected")
